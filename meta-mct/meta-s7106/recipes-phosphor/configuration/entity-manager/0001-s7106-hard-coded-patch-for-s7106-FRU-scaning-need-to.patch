From 5f74d5abcca4e1fe75fe3b01bfec8634320de1ba Mon Sep 17 00:00:00 2001
From: "ray.lue" <ray.lue@mic.com.tw>
Date: Wed, 10 Apr 2019 13:16:53 +0800
Subject: [PATCH] [s7106] hard coded patch for s7106 FRU scaning, need to be
 updated in the future.

---
 src/FruDevice.cpp | 25 ++++++++++++++++++-------
 1 file changed, 18 insertions(+), 7 deletions(-)
 mode change 100644 => 100755 src/FruDevice.cpp

diff --git a/src/FruDevice.cpp b/src/FruDevice.cpp
old mode 100644
new mode 100755
index a8c6805..a3936c6
--- a/src/FruDevice.cpp
+++ b/src/FruDevice.cpp
@@ -95,6 +95,7 @@ static int read_block_data(int flag, int file, uint16_t offset, uint8_t len,
 {
     uint8_t low_addr = offset & 0xFF;
     uint8_t high_addr = (offset >> 8) & 0xFF;
+	uint8_t index = 0;	
 
     if (flag == 0)
     {
@@ -104,15 +105,23 @@ static int read_block_data(int flag, int file, uint16_t offset, uint8_t len,
     /* This is for 16 bit addressing EEPROM device. First an offset
      * needs to be written before read data from a offset
      */
-    int ret = i2c_smbus_write_byte_data(file, 0, low_addr);
+    //int ret = i2c_smbus_write_byte_data(file, 0, low_addr);
+    int ret = i2c_smbus_write_byte_data(file, high_addr, low_addr);
     if (ret < 0)
     {
         return ret;
     }
-
-    return i2c_smbus_read_i2c_block_data(file, high_addr, len, buf);
+	while (index < len){
+	//  ioctl(file, BLKFLSBUF); // clear kernel read buffer
+		buf[index] = i2c_smbus_read_byte(file);
+		index++;
+	}
+    //return i2c_smbus_read_i2c_block_data(file, high_addr, len, buf);
+    return len;
 }
 
+#define FRU_OFFSET  0x6000
+
 int get_bus_frus(int file, int first, int last, int bus,
                  std::shared_ptr<DeviceMap> devices)
 {
@@ -143,7 +152,9 @@ int get_bus_frus(int file, int first, int last, int bus,
             }
 
             /* Check for Device type if it is 8 bit or 16 bit */
-            int flag = isDevice16Bit(file);
+            //int flag = isDevice16Bit(file);
+			int flag = 1;
+			
             if (flag < 0)
             {
                 std::cerr << "failed to read bus " << bus << " address " << ii
@@ -151,7 +162,7 @@ int get_bus_frus(int file, int first, int last, int bus,
                 continue;
             }
 
-            if (read_block_data(flag, file, 0x0, 0x8, block_data.data()) < 0)
+            if (read_block_data(flag, file, 0x0 + FRU_OFFSET, 0x8, block_data.data()) < 0)
             {
                 std::cerr << "failed to read bus " << bus << " address " << ii
                           << "\n";
@@ -177,7 +188,7 @@ int get_bus_frus(int file, int first, int last, int bus,
                     if (area_offset != 0)
                     {
                         area_offset *= 8;
-                        if (read_block_data(flag, file, area_offset, 0x8,
+                        if (read_block_data(flag, file, area_offset + FRU_OFFSET, 0x8,
                                             block_data.data()) < 0)
                         {
                             std::cerr << "failed to read bus " << bus
@@ -193,7 +204,7 @@ int get_bus_frus(int file, int first, int last, int bus,
                         while (length > 0)
                         {
                             auto to_get = std::min(0x20, length);
-                            if (read_block_data(flag, file, area_offset, to_get,
+                            if (read_block_data(flag, file, area_offset + FRU_OFFSET, to_get,
                                                 block_data.data()) < 0)
                             {
                                 std::cerr << "failed to read bus " << bus
